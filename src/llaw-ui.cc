/*
 * Copyright (c) ghgltggamer 2025
 * Written by ghgltggamer
 * Licensed under the MIT License
 * Checkout the README.md for more information about the project
 * LLAW - Open Linux Local Ai Wrapper Around LLama.cpp
*/

// This file is responsible for making the llaw User Interface , Without this you can't build the main project.

// Standard Libraries
#include <iostream>
#include <string>
#include <fstream>
#include <filesystem>

// Local headers
#include <casci/casci.hh>

int main (){
    // Index.html 
    std::string index_html_path = "ui/index.html";
    std::string style_css_path = "ui/style.css";
    std::string main_js_path = "ui/main.js";
    std::string markdown_min_js_path = "ui/marked.min.js";

    std::string output_cc_header_path = "include/llaw-ui/llaw-ui.hh";
    
    std::ifstream ifile_index_html (index_html_path);
    std::ifstream ifile_style_css (style_css_path);
    std::ifstream ifile_main_js (main_js_path);
    std::ifstream ifile_markdown_min_js (markdown_min_js_path);

    if (!ifile_index_html.is_open()){
        std::cout << "Error --> `ui/index.html` was not opened. Please make sure that it exists.\n";
        std::exit ( 3 );
    }
    if (!ifile_style_css.is_open()){
        std::cout << "Error --> `ui/style.css` was not opened. Please make sure that it exists.\n";
        std::exit ( 3 );
    }
    if (!ifile_main_js.is_open()){
        std::cout << "Error --> `ui/main.js` was not opened. Please make sure that it exists.\n";
        std::exit ( 3 );
    }
    if (!ifile_markdown_min_js.is_open()){
        std::cout << "Error --> `ui/marked.min.js` was not opened. Please make sure that it exists.\n";
        std::exit ( 3 );
    }

    std::string temp, content_html, content_css, content_js, content_mjs;
    while (std::getline (ifile_index_html, temp))
        content_html += temp + "\n";

    while (std::getline (ifile_style_css, temp))
        content_css += temp + "\n";

    while (std::getline (ifile_main_js, temp))
        content_js += temp + "\n";

    while (std::getline (ifile_markdown_min_js, temp))
        content_mjs += temp + "\n";
    
    std::filesystem::create_directory(output_cc_header_path.substr(0, output_cc_header_path.rfind("/")));
    std::ofstream ofile_cc_header (output_cc_header_path);
    ofile_cc_header << R"(
/*
 * Copyright (c) ghgltggamer 2025
 * Written by ghgltggamer
 * Licensed under the MIT License
 * Checkout the README.md for more information about the project
 * LLAW - Open Linux Local Ai Wrapper Around LLama.cpp
*/

// This headerfile is auto generated by the llaw-ui, Please do not modify this unless you know what you are doing.

namespace llaw {
    std::string ui = R"(
    )";

    std::string data = "<style>" +  content_css + "</style>" + content_html + "<script>" + content_mjs + "</script>\n" + "<script>" + content_js + "</script>";

    CASCI Casci_File (data);

    ofile_cc_header << Casci_File.encrypt ("0") <<"    )\";\n"
                    << "}"
                    << "// This headerfile ends here";;
    
}